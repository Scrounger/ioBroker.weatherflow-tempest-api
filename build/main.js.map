{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.6.4\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport { XMLHttpRequest } from 'xmlhttprequest-ts';\r\nimport moment from 'moment';\r\n\r\nimport * as forecCastTypes from './lib/foreCastTypes';\r\nimport * as myHelper from './lib/helper';\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\n\r\nclass WeatherflowTempestApi extends utils.Adapter {\r\n\tapiEndpoint = 'https://swd.weatherflow.com/swd/rest/';\r\n\tmyTranslation: { [key: string]: any; } | undefined;\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: 'weatherflow-tempest-api',\r\n\t\t\tuseFormatDate: true\r\n\t\t});\r\n\t\tthis.on('ready', this.onReady.bind(this));\r\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\r\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\r\n\t\t// this.on('message', this.onMessage.bind(this));\r\n\t\tthis.on('unload', this.onUnload.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\tconst logPrefix = '[onReady]:';\r\n\r\n\t\ttry {\r\n\t\t\t// Initialize your adapter here\r\n\t\t\tawait this.loadTranslation();\r\n\r\n\t\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\r\n\t\t\tthis.subscribeStates('forecast.update');\r\n\t\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\r\n\t\t\t// this.subscribeStates('lights.*');\r\n\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\ttry {\r\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\r\n\t\t\t// clearTimeout(timeout1);\r\n\t\t\t// clearTimeout(timeout2);\r\n\t\t\t// ...\r\n\t\t\t// clearInterval(interval1);\r\n\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n\t// /**\r\n\t//  * Is called if a subscribed object changes\r\n\t//  */\r\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n\t// \tif (obj) {\r\n\t// \t\t// The object was changed\r\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n\t// \t} else {\r\n\t// \t\t// The object was deleted\r\n\t// \t\tthis.log.info(`object ${id} deleted`);\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\r\n\t\tconst logPrefix = '[onStateChange]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (state && !state.from.includes(this.namespace)) {\r\n\t\t\t\tif (id.includes(this.namespace)) {\r\n\t\t\t\t\tif (id === `${this.namespace}.forecast.update`) {\r\n\t\t\t\t\t\tthis.updateForeCast();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// The state was deleted\r\n\t\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t\t}\r\n\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n\t// /**\r\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n\t//  */\r\n\t// private onMessage(obj: ioBroker.Message): void {\r\n\t// \tif (typeof obj === 'object' && obj.message) {\r\n\t// \t\tif (obj.command === 'send') {\r\n\t// \t\t\t// e.g. send email or pushover or whatever\r\n\t// \t\t\tthis.log.info('send command');\r\n\r\n\t// \t\t\t// Send response in callback if required\r\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\r\n\tprivate async updateForeCast(): Promise<void> {\r\n\t\tconst logPrefix = '[updateForeCast]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.hourlyEnabled || this.config.dailyEnabled) {\r\n\t\t\t\tconst url = `${this.apiEndpoint}better_forecast?station_id=${this.config.stationId}&units_temp=${this.config.unitTemperature}&units_wind=${this.config.unitWind}&units_pressure=${this.config.unitPressure}&units_precip=${this.config.unitPrecipitation}&units_distance=${this.config.unitDistance}&token=${this.config.accessToken}`;\r\n\t\t\t\tconst data = await this.downloadData(url);\r\n\r\n\t\t\t\tthis.log.warn(JSON.stringify(data));\r\n\r\n\t\t\t\tif (data && data.current_conditions) {\r\n\t\t\t\t\tawait this.updateForeCastCurrent(data.current_conditions);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.log.error(`${logPrefix} Tempest Forecast has no current condition data`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (data && data.forecast) {\r\n\t\t\t\t\tawait this.updateForeCastHourly(data.forecast.hourly);\r\n\t\t\t\t\tawait this.updateForeCastDaily(data.forecast.daily);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.log.error(`${logPrefix} Tempest Forecast has no forecast data`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async updateForeCastCurrent(data: forecCastTypes.tForeCastCurrent): Promise<void> {\r\n\t\tconst logPrefix = '[updateForeCastCurrent]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.currentEnabled) {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tawait this.createOrUpdateChannel(`forecast.current`, this.getTranslation('current_conditions'));\r\n\r\n\t\t\t\t\tfor (const [key, val] of Object.entries(data)) {\r\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(forecCastTypes.stateDefinition, key)) {\r\n\t\t\t\t\t\t\tif (!forecCastTypes.stateDefinition[key].ignore) {\r\n\t\t\t\t\t\t\t\tawait this.createOrUpdateState(`forecast.current`, forecCastTypes.stateDefinition[key], val, key);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} state '${key}' will be ignored`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.log.warn(`${logPrefix} no state definition exist for '${key}' (file: './lib/foreCastTypes.ts')`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.log.error(`${logPrefix} Tempest Forecast has no current condition data`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (await this.objectExists(`forecast.current`)) {\r\n\t\t\t\t\tawait this.delObjectAsync(`forecast.current`, { recursive: true });\r\n\t\t\t\t\tthis.log.info(`${logPrefix} deleting channel 'forecast.current' (config.currentEnabled: ${this.config.currentEnabled})`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async updateForeCastHourly(data: Array<forecCastTypes.tForeCastHourly>): Promise<void> {\r\n\t\tconst logPrefix = '[updateForeCastHourly]:';\r\n\r\n\t\ttry {\r\n\t\t\tconst idChannelPrefix = `forecast.hourly`;\r\n\r\n\t\t\tif (this.config.hourlyEnabled) {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tawait this.createOrUpdateChannel(idChannelPrefix, this.getTranslation('hourly'));\r\n\r\n\t\t\t\t\tfor (var i = 0; i <= data.length - 1; i++) {\r\n\t\t\t\t\t\tconst item: forecCastTypes.tForeCastHourly = data[i];\r\n\t\t\t\t\t\tconst timestamp = moment.unix(item.time);\r\n\t\t\t\t\t\tconst calcHours = (moment.duration(timestamp.diff(moment().startOf('hour')))).asHours();\r\n\t\t\t\t\t\tconst idChannel = `${idChannelPrefix}.${myHelper.zeroPad(calcHours, 3)}`;\r\n\r\n\t\t\t\t\t\tif (calcHours <= this.config.hourlyMax) {\r\n\t\t\t\t\t\t\tif (calcHours >= 0) {\r\n\t\t\t\t\t\t\t\tawait this.createOrUpdateChannel(idChannel, this.getTranslation('inXhours').replace('{0}', calcHours.toString()));\r\n\r\n\t\t\t\t\t\t\t\tfor (const [key, val] of Object.entries(item)) {\r\n\t\t\t\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(forecCastTypes.stateDefinition, key)) {\r\n\t\t\t\t\t\t\t\t\t\tif (!forecCastTypes.stateDefinition[key].ignore) {\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateState(idChannel, forecCastTypes.stateDefinition[key], val, key);\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} state '${key}' will be ignored`);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tthis.log.warn(`${logPrefix} no state definition exist for '${key}' (file: './lib/foreCastTypes.ts')`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// delete channels\r\n\t\t\t\t\t\t\tif (await this.objectExists(idChannel)) {\r\n\t\t\t\t\t\t\t\tawait this.delObjectAsync(idChannel, { recursive: true });\r\n\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} deleting channel '${idChannel}'`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.log.warn(`${logPrefix} downloaded data does not contain a hourly forecast!`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (await this.objectExists(idChannelPrefix)) {\r\n\t\t\t\t\tawait this.delObjectAsync(idChannelPrefix, { recursive: true });\r\n\t\t\t\t\tthis.log.info(`${logPrefix} deleting channel '${idChannelPrefix}' (config.hourlyEnabled: ${this.config.hourlyEnabled})`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async updateForeCastDaily(data: Array<forecCastTypes.tForeCastDaily>): Promise<void> {\r\n\t\tconst logPrefix = '[updateForeCastDaily]:';\r\n\r\n\t\ttry {\r\n\t\t\tconst idChannelPrefix = `forecast.daily`;\r\n\r\n\t\t\tif (this.config.dailyEnabled) {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tawait this.createOrUpdateChannel(idChannelPrefix, this.getTranslation('daily'));\r\n\r\n\t\t\t\t\tfor (var i = 0; i <= data.length - 1; i++) {\r\n\t\t\t\t\t\tconst item: forecCastTypes.tForeCastDaily = data[i];\r\n\t\t\t\t\t\tconst timestamp = moment.unix(item.day_start_local);\r\n\t\t\t\t\t\tconst calcDay = timestamp.dayOfYear() - moment().dayOfYear();\r\n\t\t\t\t\t\tconst idChannel = `${idChannelPrefix}.${myHelper.zeroPad(calcDay, 3)}`;\r\n\r\n\t\t\t\t\t\tif (calcDay <= this.config.dailyMax) {\r\n\t\t\t\t\t\t\tif (calcDay >= 0) {\r\n\t\t\t\t\t\t\t\tawait this.createOrUpdateChannel(idChannel, this.getTranslation('inXDays').replace('{0}', calcDay.toString()));\r\n\r\n\t\t\t\t\t\t\t\tfor (const [key, val] of Object.entries(item)) {\r\n\t\t\t\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(forecCastTypes.stateDefinition, key)) {\r\n\t\t\t\t\t\t\t\t\t\tif (!forecCastTypes.stateDefinition[key].ignore) {\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateState(idChannel, forecCastTypes.stateDefinition[key], val, key);\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} state '${key}' will be ignored`);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tthis.log.warn(`${logPrefix} no state definition exist for '${key}' (file: './lib/foreCastTypes.ts')`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// delete channels\r\n\t\t\t\t\t\t\tif (await this.objectExists(idChannel)) {\r\n\t\t\t\t\t\t\t\tawait this.delObjectAsync(idChannel, { recursive: true });\r\n\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} deleting channel '${idChannel}'`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.log.warn(`${logPrefix} downloaded data does not contain a daily forecast!`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (await this.objectExists(idChannelPrefix)) {\r\n\t\t\t\t\tawait this.delObjectAsync(idChannelPrefix, { recursive: true });\r\n\t\t\t\t\tthis.log.info(`${logPrefix} deleting channel '${idChannelPrefix}' (config.dailyEnabled: ${this.config.dailyEnabled})`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async createOrUpdateChannel(id: string, name: string) {\r\n\t\tconst logPrefix = '[createOrUpdateChannel]:';\r\n\r\n\t\ttry {\r\n\t\t\tconst common = {\r\n\t\t\t\tname: name,\r\n\t\t\t\t// icon: myDeviceImages[nvr.type] ? myDeviceImages[nvr.type] : null\r\n\t\t\t};\r\n\r\n\t\t\tif (!await this.objectExists(id)) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} creating channel '${id}'`);\r\n\t\t\t\tawait this.setObjectAsync(id, {\r\n\t\t\t\t\ttype: 'channel',\r\n\t\t\t\t\tcommon: common,\r\n\t\t\t\t\tnative: {}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tconst obj = await this.getObjectAsync(id);\r\n\r\n\t\t\t\tif (obj && obj.common) {\r\n\t\t\t\t\tif (JSON.stringify(obj.common) !== JSON.stringify(common)) {\r\n\t\t\t\t\t\tawait this.extendObject(id, { common: common });\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} channel updated '${id}'`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async createOrUpdateState(idChannel: string, stateDef: forecCastTypes.tStateDefinition, val: string | number, key: string) {\r\n\t\tconst logPrefix = '[createOrUpdateState]:';\r\n\r\n\t\ttry {\r\n\t\t\tconst id = `${idChannel}.${stateDef.id}`\r\n\r\n\t\t\tstateDef.common.name = this.getTranslation(key);\r\n\r\n\t\t\tif (stateDef.common.unit && Object.prototype.hasOwnProperty.call(this.config, stateDef.common.unit)) {\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tstateDef.common.unit = this.getTranslation(this.config[stateDef.common.unit]) || stateDef.common.unit\r\n\t\t\t}\r\n\r\n\t\t\tif (!await this.objectExists(id)) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} creating state '${id}'`);\r\n\r\n\t\t\t\tconst obj = {\r\n\t\t\t\t\ttype: 'state',\r\n\t\t\t\t\tcommon: stateDef.common,\r\n\t\t\t\t\tnative: {}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tawait this.setObjectAsync(id, obj);\r\n\t\t\t} else {\r\n\t\t\t\t// update State if needed\r\n\t\t\t\tconst obj = await this.getObjectAsync(id);\r\n\r\n\t\t\t\tif (obj && obj.common) {\r\n\t\t\t\t\tif (JSON.stringify(obj.common) !== JSON.stringify(stateDef.common)) {\r\n\t\t\t\t\t\tawait this.extendObject(id, { common: stateDef.common });\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} updated common properties of state '${id}'`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (key === 'time') {\r\n\t\t\t\tawait this.setStateChangedAsync(id, moment.unix(Number(val)).format(`ddd ${this.dateFormat} HH:mm`), true);\r\n\t\t\t} else if (key === 'day_start_local') {\r\n\t\t\t\tawait this.setStateChangedAsync(id, moment.unix(Number(val)).format(`ddd ${this.dateFormat}`), true);\r\n\t\t\t} else if (key === 'sunrise' || key === 'sunset') {\r\n\t\t\t\tawait this.setStateChangedAsync(id, moment.unix(Number(val)).format(`HH:mm`), true);\r\n\t\t\t} else {\r\n\t\t\t\tawait this.setStateChangedAsync(id, val, true);\r\n\t\t\t}\r\n\r\n\t\t} catch (err: any) {\r\n\t\t\tconsole.error(`${logPrefix} error: ${err.message}, stack: ${err.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async downloadData(url: string): Promise<forecCastTypes.tData | undefined> {\r\n\t\tconst logPrefix = '[downloadData]:';\r\n\r\n\t\ttry {\r\n\t\t\tlet xhr = new XMLHttpRequest();\r\n\t\t\txhr.open(\"GET\", url, false);\r\n\t\t\txhr.send();\r\n\r\n\t\t\tif (xhr.status === 200) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} Tempest ForeCast data successfully received`);\r\n\t\t\t\treturn JSON.parse(xhr.responseText);\r\n\t\t\t} else {\r\n\t\t\t\tthis.log.error(`${logPrefix} Tempest Forecast error, code: ${xhr.status}`);\r\n\t\t\t}\r\n\r\n\t\t\t// const objects = require('../test/testData.json');\r\n\t\t\t// return objects;\r\n\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tprivate async loadTranslation() {\r\n\t\tconst logPrefix = '[loadTranslation]:';\r\n\r\n\t\ttry {\r\n\t\t\tmoment.locale(this.language || 'en');\r\n\r\n\t\t\tconst fileName = `../admin/i18n/${this.language || 'en'}/translations.json`\r\n\r\n\t\t\tthis.myTranslation = (await import(fileName, { assert: { type: \"json\" } })).default;\r\n\r\n\t\t\tthis.log.debug(`${logPrefix} translation data loaded from '${fileName}'`);\r\n\r\n\t\t} catch (err: any) {\r\n\t\t\tconsole.error(`${logPrefix} error: ${err.message}, stack: ${err.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getTranslation(str: string) {\r\n\t\tconst logPrefix = '[getTranslation]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.myTranslation && this.myTranslation[str]) {\r\n\t\t\t\treturn this.myTranslation[str];\r\n\t\t\t} else {\r\n\t\t\t\tthis.log.warn(`${logPrefix} no translation for key '${str}' exists!`);\r\n\t\t\t}\r\n\t\t} catch (err: any) {\r\n\t\t\tconsole.error(`${logPrefix} error: ${err.message}, stack: ${err.stack}`);\r\n\t\t}\r\n\r\n\t\treturn str;\r\n\t}\r\n}\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new WeatherflowTempestApi(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new WeatherflowTempestApi())();\r\n}"],
  "mappings": "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",
  "names": ["moment"]
}
