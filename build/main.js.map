{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.4\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { XMLHttpRequest } from 'xmlhttprequest-ts';\nimport * as forecCastTypes from './lib/foreCastTypes'\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass WeatherflowTempestApi extends utils.Adapter {\n\tapiEndpoint = 'https://swd.weatherflow.com/swd/rest/';\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'weatherflow-tempest-api',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\tconst logPrefix = '[onReady]:';\n\n\t\ttry {\n\t\t\t// Initialize your adapter here\n\n\t\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t\t// this.config:\n\n\t\t\t/*\n\t\t\tFor every state in the system there has to be also an object of type state\n\t\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t\t*/\n\t\t\tawait this.setObjectNotExistsAsync('testVariable', {\n\t\t\t\ttype: 'state',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: 'testVariable',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\trole: 'indicator',\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: true,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\n\t\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\t\tthis.subscribeStates('forecast.update');\n\t\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t\t// this.subscribeStates('lights.*');\n\t\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t\t// this.subscribeStates('*');\n\n\t\t\t/*\n\t\t\t\tsetState examples\n\t\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t\t*/\n\t\t\t// the variable testVariable is set to true as command (ack=false)\n\t\t\tawait this.setStateAsync('forecast.update', true);\n\n\t\t\t// same thing, but the value is flagged \"ack\"\n\t\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\n\t\t\tawait this.setStateAsync('testVariable', { val: true, ack: true });\n\n\t\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\n\t\t\tawait this.setStateAsync('testVariable', { val: true, ack: true, expire: 30 });\n\n\t\t\t// examples for the checkPassword/checkGroup functions\n\t\t\tlet result = await this.checkPasswordAsync('admin', 'iobroker');\n\t\t\tthis.log.info('check user admin pw iobroker: ' + result);\n\n\t\t\tresult = await this.checkGroupAsync('admin', 'admin');\n\t\t\tthis.log.info('check group user admin group admin: ' + result);\n\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\n\t\t}\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n\t\tconst logPrefix = '[onStateChange]:';\n\n\t\ttry {\n\t\t\tif (state && !state.from.includes(this.namespace)) {\n\t\t\t\tif (id.includes(this.namespace)) {\n\t\t\t\t\tif (id === `${this.namespace}.forecast.update`) {\n\t\t\t\t\t\tthis.updateForeCast();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// The state was deleted\n\t\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t\t}\n\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate async updateForeCast(): Promise<void> {\n\t\tconst logPrefix = '[updateForeCast]:';\n\n\t\ttry {\n\t\t\tif (this.config.hourlyEnabled || this.config.dailyEnabled) {\n\t\t\t\tconst url = `${this.apiEndpoint}better_forecast?station_id=${this.config.stationId}&units_temp=${this.config.unitTemperature}&units_wind=${this.config.unitWind}&units_pressure=${this.config.unitPressure}&units_precip=${this.config.unitPrecipitation}&units_distance=${this.config.unitDistance}&token=${this.config.accessToken}`;\n\t\t\t\tlet xhr = new XMLHttpRequest();\n\t\t\t\txhr.open(\"GET\", url, false);\n\t\t\t\txhr.send();\n\n\t\t\t\tif (xhr.status === 200) {\n\t\t\t\t\tlet data: forecCastTypes.tData = JSON.parse(xhr.responseText);\n\n\t\t\t\t\tif (data && data.forecast) {\n\t\t\t\t\t\tthis.log.warn(JSON.stringify(data.forecast));\n\n\t\t\t\t\t\tif (this.config.hourlyEnabled && data.forecast.hourly) {\n\t\t\t\t\t\t\tthis.updateForeCastHourly(data.forecast.hourly);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.log.warn(`${logPrefix} downloaded data does not contain a hourly forecast!`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.config.dailyEnabled && data.forecast.daily) {\n\t\t\t\t\t\t\tthis.updateForeCastDaily(data.forecast.daily);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.log.warn(`${logPrefix} downloaded data does not contain a daily forecast!`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.log.error(`${logPrefix} Tempest Forecast has no forecast data`);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis.log.error(`${logPrefix} Tempest Forecast error, code: ${xhr.status}`);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\n\t\t}\n\t}\n\n\tprivate async updateForeCastHourly(data: Array<forecCastTypes.tForeCastHourly>): Promise<void> {\n\t\tconst logPrefix = '[updateForeCastHourly]:';\n\n\t\ttry {\n\t\t\tthis.log.warn(JSON.stringify(forecCastTypes.stateHourlyDef));\n\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\n\t\t}\n\t}\n\n\tprivate async updateForeCastDaily(data: Array<forecCastTypes.tForeCastDaily>): Promise<void> {\n\t\tconst logPrefix = '[updateForeCastDaily]:';\n\n\t\ttry {\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new WeatherflowTempestApi(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new WeatherflowTempestApi())();\n}"],
  "mappings": "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",
  "names": []
}
